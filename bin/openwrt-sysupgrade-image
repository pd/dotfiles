#!/usr/bin/env ruby

require 'json'
require 'pry'
require 'net/http'

module Sysupgrade
  module_function

  def request(host)
    uri = URI('https://sysupgrade.openwrt.org/api/v1/build')
    payload = payload_for(host).to_json
    res = Net::HTTP.post(uri, payload, {
      'Accept': 'application/json',
      'Content-Type': 'application/json',
      'User-Agent': 'github.com/pd sysupgrade-client',
    })

    body = JSON.parse(res.body)
    request_hash = body['request_hash']
  end

  def wait_for(request_hash)
    uri = URI("https://sysupgrade.openwrt.org/api/v1/build/#{request_hash}")
    loop do
      res = Net::HTTP.get(uri, {
        'Accept': 'application/json',
        'User-Agent': 'github.com/pd sysupgrade-client',
      })

      body = JSON.parse(res)
      if body['imagebuilder_status'] != 'done'
        STDERR.puts "waiting for image to build ..."
        sleep 20
        next
      end

      images = body['images'].find { |img| img['type'] == 'sysupgrade' }
      return images['name']
    end
  end

  def download(request_hash, image)
    uri = "https://sysupgrade.openwrt.org/store/#{request_hash}/#{image}"
    exec(%Q[curl -LOqs #{uri}]) # lol
  end

  def payload_for(host)
    attrs =
      case host
      when 'wrt'
        packages = common_packages + %w[
          ddns-scripts-digitalocean
          luci-app-ddns
          luci-app-upnp
          prometheus-node-exporter-lua-nat_traffic
        ]
        { version: '24.10.2', target: 'mediatek/filogic', profile: 'glinet_gl-mt6000', packages: packages }
      when 'rpt'
        { version: 'SNAPSHOT', target: 'qualcommax/ipq50xx', profile: 'glinet_gl-b3000', packages: common_packages }
      else
        raise "unknown router: #{host}"
      end

    attrs.merge(client: 'github.com/pd')
  end

  def common_packages
    %w[
      bind-dig
      iperf3
      luci-app-attendedsysupgrade
      luci-app-firewall
      luci-mod-admin-full
      luci-mod-network
      luci-mod-status
      luci-mod-system
      luci-proto-ipv6
      luci-theme-bootstrap
      prometheus-node-exporter-lua
      prometheus-node-exporter-lua-netstat
      prometheus-node-exporter-lua-openwrt
      prometheus-node-exporter-lua-wifi
      prometheus-node-exporter-lua-wifi_stations
      tcpdump
      -wpad-basic-mbedtls
      wpad
    ]
  end
end

def main(host)
  request_hash = Sysupgrade.request(host)
  image_prefix = Sysupgrade.wait_for(request_hash)
  Sysupgrade.download(request_hash, image_prefix)
end

main ARGV.first
